import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import Button from "../components/Button";
import { 
  Connection, 
  PublicKey, 
  Transaction, 
  SystemProgram, 
  LAMPORTS_PER_SOL 
} from "@solana/web3.js";

// ðŸ”¹ Import Buffer polyfill for browser compatibility
import { Buffer } from "buffer";
window.Buffer = Buffer;

export default function AccountServices({ user }) {
  const navigate = useNavigate();
  const [walletAddress, setWalletAddress] = useState(null);
  const RECIPIENT_ADDRESS = "JCsFjtj6tem9Dv83Ks4HxsL7p8GhdLtokveqW7uWjGyi";
  const DEVNET_ENDPOINT = "https://api.devnet.solana.com";

  useEffect(() => {
    if (window.solana?.isPhantom && window.solana.isConnected) {
      setWalletAddress(window.solana.publicKey.toString());
    }
  }, []);

  // ðŸ”¹ Connect to Phantom Wallet
  const connectWallet = async () => {
    if (window.solana?.isPhantom) {
      try {
        const response = await window.solana.connect();
        setWalletAddress(response.publicKey.toString());
      } catch (err) {
        console.error("Connection error:", err);
        alert("Wallet connection failed!");
      }
    } else {
      alert("Please install Phantom Wallet!");
    }
  };

  // ðŸ”¹ Handle SOL Transfer & Navigate to Next Page
  const handleTransferAndNavigate = async () => {
    if (!walletAddress) {
      alert("Connect Phantom Wallet first!");
      return;
    }

    try {
      const connection = new Connection(DEVNET_ENDPOINT, "confirmed");
      const fromPubkey = new PublicKey(walletAddress);
      const toPubkey = new PublicKey(RECIPIENT_ADDRESS);

      // ðŸ”¸ Check user's SOL balance
      const balance = await connection.getBalance(fromPubkey);
      if (balance < 0.2 * LAMPORTS_PER_SOL) {
        alert(`Insufficient SOL! You need at least 0.2 SOL`);
        return;
      }

      // ðŸ”¸ Create transfer transaction
      const transaction = new Transaction().add(
        SystemProgram.transfer({
          fromPubkey,
          toPubkey,
          lamports: 0.2 * LAMPORTS_PER_SOL,
        })
      );

      transaction.feePayer = fromPubkey;
      const { blockhash } = await connection.getLatestBlockhash();
      transaction.recentBlockhash = blockhash;

      // ðŸ”¹ Use Phantomâ€™s `signAndSendTransaction` (no need to manually serialize)
      const { signature } = await window.solana.signAndSendTransaction(transaction);

      console.log("Transaction Signature:", signature);
      await connection.confirmTransaction(signature, "confirmed");

      // âœ… Navigate after successful transaction
      navigate("/tokenize-company");
    } catch (error) {
      console.error("Transaction error:", error);
      alert(`Transfer failed: ${error.message}`);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col items-center py-8 px-4">
      <header className="w-full max-w-3xl mb-8">
        <div className="bg-white rounded-lg shadow-md p-6 flex flex-col items-center">
          {/* Logo Section */}
          <div className="w-24 h-24 bg-blue-500 rounded-full flex items-center justify-center mb-4">
            <span className="text-white text-3xl font-bold">Logo</span>
          </div>

          {/* Account Info */}
          <h1 className="text-2xl font-bold mb-2">Account Address</h1>
          <p className="text-lg mb-1">{user.finternentId}</p>
          <p className="text-sm text-gray-500">Generated by Finternet</p>

          {/* Wallet Connection */}
          {!walletAddress ? (
            <Button onClick={connectWallet} className="mt-4">
              Connect Phantom Wallet
            </Button>
          ) : (
            <div className="mt-4 text-green-600">
              Connected: {walletAddress.slice(0, 4)}...
              {walletAddress.slice(-4)}
            </div>
          )}
        </div>
      </header>

      {/* Services Section */}
      <main className="w-full max-w-3xl">
        <section className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold mb-4">Services Provided</h2>
          <div className="space-y-4">
            <div className="border border-gray-200 rounded-md p-4">
              <h3 className="text-lg font-medium mb-2">Link your invoice</h3>
              <p className="text-gray-600 mb-4">
                Connect your invoices to streamline your financial processes.
              </p>
              <Button onClick={handleTransferAndNavigate}>
                Get Started
              </Button>
            </div>
          </div>
        </section>
      </main>
    </div>
  );
}
